@model EventPlanner.Models.Models.EventModel

@{
    ViewBag.Title = "Create Event";
}


@*TODO: Can be maybe moved to layout or at least partial view*@
<div class="jumbotron">
    <h1>Event Planner</h1>
    <p class="lead">Some catchy phrase to introduce our supercool app.</p>
    <p><a href="#start" class="btn btn-primary btn-lg">Start now </a></p>
</div>

<div class="container">
        @Html.ValidationSummary()
    @using (Html.BeginForm("Index", "CreateEvent", FormMethod.Post, new { @class = "" }))
    {
        <div class="row" id="intro">

            <div class="form-group">
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Desc)
                @Html.TextAreaFor(m => m.Desc, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Desc, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.ExpectedLength)
                @Html.TextBoxFor(m => m.ExpectedLength, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.ExpectedLength, "", new { @class = "text-danger" })
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.OthersCanEdit)
                @Html.EditorFor(m => m.OthersCanEdit, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.OthersCanEdit, "", new { @class = "text-danger" })
            </div>

          
              <div class="form-group" id="containerDates">
                  <label for="dp">Choose a date</label>
                  <span id="divDate">
                      <input type="date" class="form-control" id="datepicker" name="Dates[0].Date" value="@Request["Dates"]" />
                      <input type="date" class="form-control" id="datepicker" name="Dates[i].Times[j]" value="@Request["Dates"]" />
                      <span id="divcust0">
                                              
                      </span>
                      <input id="btnAdd0" type="button" value="Add time" onclick="AddTime(this.id);" />
                  </span>
                  <br/>
                  <input type="button" id="btnAddDate" value="Add another date" onclick="AddDate();" />
            </div>


        </div>
        <div class="row" id="places">
            <div class="form-group">
                <label>Places</label>
                <p>Search places for your event using FourSquare!</p>
                <div id="FourSquareSearchModule"></div>

            </div>
        </div>

        <input type="submit" class="btn btn-primary" value="Create an event"/>
    }
</div>


    @section scripts
    {
<script src="http://localhost:4272/Scripts/bootstrap-datepicker.js"></script>

        <script src="@Url.Content("~/Scripts/Typeahead/typeahead.bundle.js")"></script>
        <script type="text/jsx" src="@Url.Content("~/Scripts/Custom/FourSquareSearchModule.jsx")"></script>
        <script type="text/jsx">
            React.render(<FourSquareApp getDataURL="@Url.Action("GetData", "CreateEvent")" preSelectedPlaces={@Html.Raw(Json.Encode(Model.Places))} />, document.getElementById('FourSquareSearchModule'));
        </script>
        
        <script src="@Url.Content("~/Scripts/bootstrap.min.js")"></script>
        <script src="@Url.Content("~/Scripts/Custom/NewTime.js")"></script>
        <script src="@Url.Content("~/Scripts/Custom/NewDate.js")"></script>

 
    }


