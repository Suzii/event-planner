@using EventPlanner.Web.Helpers
@model EventPlanner.Models.Models.CreateAndEdit.EventModel

@{
    ViewBag.Title = "Create Event";
}
<h2>Create your event:</h2>

<div class="container">
    @Html.ValidationSummary()
    @using (Html.BeginForm("Index", "Event", FormMethod.Post, new { @class = "" }))
    {
        @Html.HiddenFor(m => m.Id)
        <div class="row" id="intro">

            <div class="form-group">
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Title, "", new { @class = "text-danger" })

            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Desc)
                @Html.TextAreaFor(m => m.Desc, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.Desc, "", new { @class = "text-danger" })
            </div>

            <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(m => m.ExpectedLength)
                    <div class="input-group  col-sm-4">
                        @Html.TextBoxFor(m => m.ExpectedLength, new { type = "number", @class = "form-control" })
                        <div class="input-group-addon">hrs</div>
                    </div>
                @Html.ValidationMessageFor(m => m.ExpectedLength, "", new { @class = "text-danger" })
            </div>
            </div>

            <div class="form-inline">
            <div class="form-group">
                @Html.LabelFor(m => m.OthersCanEdit)
                    @Html.EditorFor(m => m.OthersCanEdit)
                @Html.ValidationMessageFor(m => m.OthersCanEdit, "", new {@class = "text-danger"})
            </div>
            </div>

            <hr />
            @* NOTE: following code is under construction.. *@
            <div class="form-group" id="containerDates">
                <label for="dp">Choose a date</label>
                <br />
            <span id="divDate">
                <span id="divcust0" class="divcust0">
                    @for (var i = 0; i < Model.Dates.Count; i++)

                    { <br />
                        //date

                            @Html.TextBoxFor(m => m.Dates[i].Date, "{0:yyyy-MM-dd}", new { @class = "datepicker", type = "date" })

                        //time
                        for (var j = 0; j < Model.Dates[i].Times.Count; j++)
                        {
                            @Html.HiddenFor((m => m.Dates[i].Times[j].Id)) //timeslot id
                            @Html.DropDownListFor(m => m.Dates[i].Times[j].Time, new SelectList ((ViewBag.Times), "Value", "Text", Model.Dates[i].Times[j].Time))
                        }
                    }

                </span>
                    <input id="btnAdd0" class="add" type="button" value="Add time" onclick="AddTime(this.id);"  />
                </span>
                <br />
                <input type="button" id="btnAddDate" value="Add another date" onclick="AddDate();" />
            </div>
        </div>

        //NOTE: FourSquare module goes here. All html code is renderd inside of ReactJS module.
        <div class="row row-adjust" id="places">
            <div class="form-group">
                <label>Places</label>
                <p>Search places for your event using FourSquare!</p>
                <div id="FourSquareSearchModule"></div>
            </div>
        </div>

        <input type="submit" class="btn btn-primary" value="Create an event" />
    }
</div>


@section scripts
    {
    <script src="@Url.Content("~/Scripts/Custom/NewTime.js")"></script>
    <script src="@Url.Content("~/Scripts/Custom/NewDate.js")"></script>
    <script src="@Url.Content("~/Scripts/Typeahead/typeahead.bundle.js")"></script>
    <script type="text/jsx" src="@Url.Content("~/Scripts/Custom/FourSquareSearchModule.jsx")"></script>
    <script type="text/jsx">
        React.render(<FourSquareApp getDataURL="@Url.Action("GetPlacesData", "Event")" preSelectedPlaces={@Html.Raw(Json.Encode(Model.Places))} defaultPlace="@LocationHelper.GetCurrentCity()" />, document.getElementById('FourSquareSearchModule'));
    </script>
}