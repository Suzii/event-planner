@using EventPlanner.Web.Helpers
@model EventPlanner.Models.Models.CreateAndEdit.EventModel

@{
    string action = Model.Id.HasValue ? "Edit" : "Create";
    ViewBag.Title = action + " Event";
}

@section scripts
{
    @Scripts.Render("~/Scripts/Typeahead/typeahead.bundle.js")
    @Scripts.Render("~/Scripts/Compiled/event-bundle.js")
    @Scripts.Render("~/Scripts/Custom/Event/NewTime.js")
    @Scripts.Render("~/Scripts/Custom/Event/NewDate.js")
}

<h2>@action your event</h2>

<div class="container">

    @if (!ViewData.ModelState.IsValid)
    {
        <div class="alert alert-danger">
            <button type="button" class="close" data-dismiss="alert"><i class="glyphicon glyphicon-remove"></i></button>
            @Html.ValidationSummary(false, "Some things needs your attention before sending: ")
        </div>
    }
    @using (Html.BeginForm("Index", "Event", FormMethod.Post, new {@class = ""}))
    {
        @Html.HiddenFor(m => m.Id)
        <div class="row" id="intro">
            <h3>Basic information:</h3>

            <div class="form-group">
                @Html.LabelFor(m => m.Title)
                @Html.TextBoxFor(m => m.Title, new {@class = "form-control" })
                @Html.ValidationMessageFor(m => m.Title, "", new {@class = "text-danger"})

            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.Desc)
                @Html.TextAreaFor(m => m.Desc, new {@class = "form-control wide-input" })
                @Html.ValidationMessageFor(m => m.Desc, "", new {@class = "text-danger"})
            </div>

            <div class="form-group">
                @Html.LabelFor(m => m.ExpectedLength)
                @Html.EditorFor(m => m.ExpectedLength, new {@class = "form-control short-input" })
                hours
                @Html.ValidationMessageFor(m => m.ExpectedLength, "", new {@class = "text-danger"})
            </div>

            <div class="form-group">
                @Html.EditorFor(m => m.OthersCanEdit, new { @class = "form-control" })
                @Html.LabelFor(m => m.OthersCanEdit, new { @style = "padding-left: 1em;"})
                @Html.ValidationMessageFor(m => m.OthersCanEdit, "", new {@class = "text-danger"})
            </div>

        </div>
        <div class="row">
            <hr/>
            <h3>Choose dates:</h3>
            <span id="divDate">
            @*@Html.ValidationMessageFor(m => m.Dates, "", new { @class = "text-danger row row-adjust" })*@
                    
                @for (var i = 0; i < Model.Dates.Count; i++)
                {

                    //delete button for date and time
                     if (i != 0)
                    {
                     <br id=@("br" + i) />
                         @: <button id=@("btnDel-" + i) type="button" onclick="DelDate(this.id);" class="btn btn-default">  <spann class='glyphicon glyphicon-remove' aria-hidden='true' /></button>
                         
                        
                   }

                    //date
                        @:  <span id="@("divcust" + i)">
                        @Html.TextBoxFor(m => m.Dates[i].Date, "{0:yyyy-MM-dd}", new {@class = "datepicker", type = "date"})

                  

                        //time
                        if (Model.Dates[i].Times != null)
                        {
                            for (var j = 0; j < Model.Dates[i].Times.Count; j++)
                            {
                                @Html.HiddenFor(m => m.Dates[i].Times[j].Id, new { id = "Dates_" + i + "Times_" + j + "Id" })
                                @Html.DropDownListFor(m => m.Dates[i].Times[j].Time, new SelectList((ViewBag.Times), "Value", "Text", Model.Dates[i].Times[j].Time), new { @class = "form-control-select", id = "Dates_" + i + "Times_" + j })
                            
                            //delete button for time  
                            if (j != 0)
                            {
                                    @:  <button id=@("btnDel-" + i + "_" + j) type="button" onclick="DelTime(this.id);"  class="btn btn-default btn-xs" ><spann class='glyphicon glyphicon-remove' aria-hidden='true' /></button>   
                                }
                            }
                        }
                        @:  </span>
                        @:  <input id=@("btnAdd" + i) type="button" value="Add time" class="btn btn-default" onclick="AddTime(this.id);" style="width: 90px">
                    }

           </span>
            @Html.ValidationMessageFor(m => m.Dates, "", new {@class = "text-danger"})
            <br/>
            <input type="button" id="btnNewDate" value="Add date" onclick="AddDate();" class="btn btn-default" style="width: 90px"/>
        </div>

        <div class="row" id="places">
            <hr/>
            <h3>Choose places:</h3>
            <div class="form-group">
                <p>Search places for your event using FourSquare!</p>
                @*NOTE: FourSquare module goes here. All HTML code is rendered inside of ReactJS module.*@
                <div id="FourSquareSearchModule"
                     data-get-data-url="@Url.Action("GetPlacesData", "Event")"
                     data-preselected-places="@Json.Encode(Model.Places)"
                     data-default-place="@LocationHelper.GetCurrentCity(Request.IsLocal ? " " : Request.UserHostAddress)"></div>
                @Html.ValidationMessageFor(m => m.Places, "", new {@class = "text-danger"})
            </div>
        </div>
        
        <div class="row">
            <input type="submit" class="btn btn-primary btn-lg v-space60" value="@action your event"/>
        </div>
    }
</div>