@using EventPlanner.Models.Enums
@using EventPlanner.Web.Helpers
@model EventPlanner.Models.Models.Vote.VoteModel

<h3>Vote for dates:</h3>

@foreach (var date in Model.EventViewModel.TimeSlots)
{
    var index = Model.VotesForDates.FindIndex(v => v.TimeSlotId == date.Id);
    <div class="row">
        <div class="col-md-2">
            <div class="text-primary">@date.DateTime.ToLongDateString()</div>
            <div class="text-muted">@date.DateTime.ToShortTimeString()</div>
        </div>
        <div class="col-md-2">
            @*TODO: modelbinding requires refactoring*@
            @Html.HiddenFor(m => m.VotesForDates[index].TimeSlotId)
            @Html.EditorFor(m => m.VotesForDates[index].WillAttend, new { @class = "form-control" })
        </div>
        <div class="col-md-8">
            <div class="row">
                @RazorHelpers.WillAttendProgressBar(
                    date.VotesForDate.Count(v => v.WillAttend == WillAttend.Yes),
                    date.VotesForDate.Count(v => v.WillAttend == WillAttend.Maybe),
                    date.VotesForDate.Count(v => v.WillAttend == WillAttend.No),
                    0)
            </div>

            <div class="row atendees" style="margin-top: -1em; margin-bottom: 0.5em">
                @*TODO : change to displaying username once supported*@
                TODO: refactor - should be displayed onclick/onhover over the appropriate part of graph <br/>
                <strong>Yes: </strong> @date.VotesForDate.Where(vote => vote.WillAttend == WillAttend.Yes).Select(vote => vote.UserId).Aggregate(string.Empty, (next, accu) => accu + ", " + next) <br />
                <strong>Maybe: </strong> @date.VotesForDate.Where(vote => vote.WillAttend == WillAttend.Maybe).Select(vote => vote.UserId).Aggregate(string.Empty, (next, accu) => accu + ", " + next) <br />
                <strong>No: </strong> @date.VotesForDate.Where(vote => vote.WillAttend == WillAttend.No).Select(vote => vote.UserId).Aggregate(string.Empty, (next, accu) => accu + ", " + next)
            </div>
        </div>
    </div>
}

