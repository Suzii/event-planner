@using EventPlanner.Web.Helpers
@model EventPlanner.Models.Models.Vote.VoteModel

<h3>Votes for places:</h3>
<div class="table-responsive">
    <table class="table">
        <tbody>
            @foreach (var place in Model.EventViewModel.Places)
            {
                var index = Model.VotesForPlaces.FindIndex(v => v.PlaceId == place.Id);
                var numOfWillAttendUsers = place.VotesForPlace.Count(v => v.WillAttend);
                var willAttendPercentage = (Model.EventViewModel.TotalNumberOfVoters > 0) ? (int)(100 * numOfWillAttendUsers / Model.EventViewModel.TotalNumberOfVoters) : 50;
                <tr>
                    <td>@place.Venue.Name</td>
                    <td>
                        <div class="progress">
                            <div class="progress-bar" role="progressbar" aria-valuenow="@(willAttendPercentage)" aria-valuemin="0" aria-valuemax="100" style="width: @(willAttendPercentage)%;">
                                @(numOfWillAttendUsers) / @(Model.EventViewModel.TotalNumberOfVoters) (@(willAttendPercentage)%)
                            </div>
                        </div>
                        <div class="atendees">
                            @*TODO : change to displaying username once supported*@
                            @place.VotesForPlace.Where(vote => vote.WillAttend).Select(vote => vote.UserId).Aggregate(string.Empty, (next, accu) => accu + ", " + next)
                        </div>
                    </td>
                    <td>
                        @*TODO: modelbinding requires refactoring*@
                        @Html.HiddenFor(m => m.VotesForPlaces[index].PlaceId)
                        @Html.EditorFor(m => m.VotesForPlaces[index].WillAttend)
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
